////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Top.vf
// /___/   /\     Timestamp : 03/21/2017 13:34:39
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath D:/zxd_CS/CC/OExp03-IP2SOC_DIY/Code -sympath D:/zxd_CS/CC/OExp03-IP2SOC_DIY/ipcore_dir -intstyle ise -family kintex7 -verilog D:/zxd_CS/CC/OExp03-IP2SOC_DIY/Top.vf -w D:/zxd_CS/CC/OExp03-IP2SOC_DIY/Code/Top.sch
//Design Name: Top
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module Display_MUSER_Top(clk, 
                         flash, 
                         Hexs, 
                         LES, 
                         point, 
                         rst, 
                         Start, 
                         Text, 
                         segclk, 
                         segclrn, 
                         SEGEN, 
                         segsout);

    input clk;
    input flash;
    input [31:0] Hexs;
    input [7:0] LES;
    input [7:0] point;
    input rst;
    input Start;
    input Text;
   output segclk;
   output segclrn;
   output SEGEN;
   output segsout;
   
   wire [63:0] XLXN_10;
   wire [63:0] XLXN_12;
   wire [63:0] XLXN_14;
   
   P2S  M2 (.clk(clk), 
           .PData(XLXN_10[63:0]), 
           .rst(rst), 
           .Start(Start), 
           .EN(SEGEN), 
           .sclk(segclk), 
           .sclrn(segclrn), 
           .sout(segsout));
   HexTo8SEG  SM1 (.flash(flash), 
                  .Hexs(Hexs[31:0]), 
                  .LES(LES[7:0]), 
                  .points(point[7:0]), 
                  .SEG_TXT(XLXN_14[63:0]));
   MUX2T1_64  SM2 (.a(XLXN_14[63:0]), 
                  .b(XLXN_12[63:0]), 
                  .sel(Text), 
                  .o(XLXN_10[63:0]));
   SSeg_map  SM3 (.Disp_num({Hexs[31:0], Hexs[31:0]}), 
                 .Seg_map(XLXN_12[63:0]));
endmodule
`timescale 1ns / 1ps

module Top(clk_100mhz, 
           K_COL, 
           RSTN, 
           SW, 
           AN, 
           Buzzer, 
           CR, 
           K_ROW, 
           LED, 
           LEDCLK, 
           LEDCLR, 
           LEDDT, 
           LEDEN, 
           RDY, 
           readn, 
           SEGCLK, 
           SEGCLR, 
           SEGDT, 
           SEGEN, 
           SEGMENT);

    input clk_100mhz;
    input [3:0] K_COL;
    input RSTN;
    input [15:0] SW;
   output [3:0] AN;
   output Buzzer;
   output CR;
   output [4:0] K_ROW;
   output [7:0] LED;
   output LEDCLK;
   output LEDCLR;
   output LEDDT;
   output LEDEN;
   output RDY;
   output readn;
   output SEGCLK;
   output SEGCLR;
   output SEGDT;
   output SEGEN;
   output [7:0] SEGMENT;
   
   wire [31:0] Addr_out;
   wire [31:0] Ai;
   wire [31:0] Bi;
   wire [7:0] blink;
   wire [3:0] BTN_OK;
   wire [31:0] Counter_out;
   wire [31:0] CPU2IO;
   wire [31:0] Data_in;
   wire [31:0] Data_out;
   wire [31:0] Disp_num;
   wire [31:0] Div;
   wire GPIOF0;
   wire [31:0] inst;
   wire [7:0] LE_out;
   wire N0;
   wire [31:0] PC;
   wire [7:0] point_out;
   wire [3:0] Pulse;
   wire rst;
   wire [15:0] SW_OK;
   wire V5;
   wire [4:0] XLXN_9;
   wire XLXN_88;
   wire XLXN_97;
   wire XLXN_98;
   wire [31:0] XLXN_99;
   wire [1:0] XLXN_140;
   wire [15:0] XLXN_141;
   wire XLXN_150;
   wire [31:0] XLXN_151;
   wire [31:0] XLXN_152;
   wire [31:0] XLXN_153;
   wire XLXN_154;
   wire [31:0] XLXN_158;
   wire [0:0] XLXN_160;
   wire [9:0] XLXN_162;
   wire [31:0] XLXN_164;
   wire XLXN_169;
   wire XLXN_192;
   wire XLXN_193;
   wire XLXN_199;
   wire XLXN_200;
   wire RDY_DUMMY;
   wire readn_DUMMY;
   
   assign RDY = RDY_DUMMY;
   assign readn = readn_DUMMY;
   SAnti_jitter  XLXI_1 (.clk(clk_100mhz), 
                        .Key_y(K_COL[3:0]), 
                        .readn(readn_DUMMY), 
                        .RSTN(RSTN), 
                        .SW(SW[15:0]), 
                        .BTN_OK(BTN_OK[3:0]), 
                        .CR(CR), 
                        .Key_out(XLXN_9[4:0]), 
                        .Key_ready(RDY_DUMMY), 
                        .Key_x(K_ROW[4:0]), 
                        .pulse_out(Pulse[3:0]), 
                        .rst(rst), 
                        .SW_OK(SW_OK[15:0]));
   clk_div  XLXI_2 (.clk(clk_100mhz), 
                   .rst(rst), 
                   .SW2(SW_OK[2]), 
                   .clkdiv(Div[31:0]), 
                   .Clk_CPU(XLXN_199));
   SEnter_2_32  XLXI_3 (.BTN(BTN_OK[2:0]), 
                       .clk(clk_100mhz), 
                       .Ctrl({SW_OK[7:5], SW_OK[15], SW_OK[0]}), 
                       .Din(XLXN_9[4:0]), 
                       .D_ready(RDY_DUMMY), 
                       .Ai(Ai[31:0]), 
                       .Bi(Bi[31:0]), 
                       .blink(blink[7:0]), 
                       .readn(readn_DUMMY));
   Multi_8CH32  XLXI_5 (.clk(XLXN_200), 
                       .Data0(CPU2IO[31:0]), 
                       .data1({N0, N0, PC[31:2]}), 
                       .data2(inst[31:0]), 
                       .data3(Counter_out[31:0]), 
                       .data4(Addr_out[31:0]), 
                       .data5(Data_out[31:0]), 
                       .data6(Data_in[31:0]), 
                       .data7(PC[31:0]), 
                       .EN(XLXN_193), 
                       .LES({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0}), 
                       .point_in({Div[31:0], Div[31:0]}), 
                       .rst(rst), 
                       .Test(SW_OK[7:5]), 
                       .Disp_num(Disp_num[31:0]), 
                       .LE_out(LE_out[7:0]), 
                       .point_out(point_out[7:0]));
   VCC  XLXI_11 (.P(V5));
   GND  XLXI_12 (.G(N0));
   VCC  XLXI_17 (.P(XLXN_88));
   BUF  XLXI_18 (.I(XLXN_88), 
                .O(Buzzer));
   Seg7_Dev  XLXI_20 (.flash(Div[25]), 
                     .Hexs(Disp_num[31:0]), 
                     .LES(LE_out[7:0]), 
                     .point(point_out[7:0]), 
                     .Scan({SW_OK[1], Div[19:18]}), 
                     .SW0(SW_OK[0]), 
                     .AN(AN[3:0]), 
                     .SEGMENT(SEGMENT[7:0]));
   PIO  XLXI_23 (.clk(clk_100mhz), 
                .EN(GPIOF0), 
                .PData_in(Ai[31:0]), 
                .rst(N0), 
                .counter_set(), 
                .GPIOf0(), 
                .LED_out(LED[7:0]));
   Display_MUSER_Top  XLXI_24 (.clk(clk_100mhz), 
                              .flash(Div[25]), 
                              .Hexs(Disp_num[31:0]), 
                              .LES(LE_out[7:0]), 
                              .point(point_out[7:0]), 
                              .rst(rst), 
                              .Start(Div[20]), 
                              .Text(SW_OK[0]), 
                              .segclk(SEGCLK), 
                              .segclrn(SEGCLR), 
                              .SEGEN(SEGEN), 
                              .segsout(SEGDT));
   GPIO  XLXI_25 (.clk(XLXN_200), 
                 .EN(XLXN_192), 
                 .P_Data(CPU2IO[31:0]), 
                 .rst(rst), 
                 .Start(Div[20]), 
                 .counter_set(XLXN_140[1:0]), 
                 .GPIOf0(), 
                 .ledclk(LEDCLK), 
                 .ledclrn(LEDCLR), 
                 .LEDEN(LEDEN), 
                 .ledsout(LEDDT), 
                 .LED_out(XLXN_141[15:0]));
   MIO_BUS  XLXI_26 (.addr_bus(XLXN_151[31:0]), 
                    .BTN(BTN_OK[3:0]), 
                    .clk(clk_100mhz), 
                    .counter_out(XLXN_99[31:0]), 
                    .counter0_out(XLXN_154), 
                    .counter1_out(XLXN_97), 
                    .counter2_out(XLXN_98), 
                    .Cpu_data2bus(XLXN_153[31:0]), 
                    .led_out(XLXN_141[15:0]), 
                    .mem_w(XLXN_150), 
                    .ram_data_out(XLXN_164[31:0]), 
                    .rst(rst), 
                    .SW(SW_OK[15:0]), 
                    .counter_we(XLXN_169), 
                    .Cpu_data4bus(XLXN_152[31:0]), 
                    .data_ram_we(XLXN_160[0]), 
                    .GPIOe0000000_we(XLXN_193), 
                    .GPIOf0000000_we(XLXN_192), 
                    .Peripheral_in(CPU2IO[31:0]), 
                    .ram_addr(XLXN_162[9:0]), 
                    .ram_data_in(XLXN_158[31:0]));
   Counter  XLXI_27 (.clk(XLXN_200), 
                    .clk0(Div[6]), 
                    .clk1(Div[9]), 
                    .clk2(Div[11]), 
                    .counter_ch(XLXN_140[1:0]), 
                    .counter_val(CPU2IO[31:0]), 
                    .counter_we(XLXN_169), 
                    .rst(rst), 
                    .counter_out(XLXN_99[31:0]), 
                    .counter0_OUT(XLXN_154), 
                    .counter1_OUT(XLXN_97), 
                    .counter2_OUT(XLXN_98));
   SCPU  XLXI_28 (.clk(XLXN_199), 
                 .Data_in(XLXN_152[31:0]), 
                 .inst_in(inst[31:0]), 
                 .INT(XLXN_154), 
                 .MIO_ready(), 
                 .reset(rst), 
                 .Addr_out(XLXN_151[31:0]), 
                 .CPU_MIO(), 
                 .Data_out(XLXN_153[31:0]), 
                 .mem_w(XLXN_150), 
                 .PC_out(PC[31:0]));
   INV  XLXI_38 (.I(XLXN_199), 
                .O(XLXN_200));
   ROM_D  XLXI_39 (.a(PC[11:2]), 
                  .spo(inst[31:0]));
   RAM_B  XLXI_40 (.addra(XLXN_162[9:0]), 
                  .clka(clk_100mhz), 
                  .dina(XLXN_158[31:0]), 
                  .wea(XLXN_160[0]), 
                  .douta(XLXN_164[31:0]));
endmodule
