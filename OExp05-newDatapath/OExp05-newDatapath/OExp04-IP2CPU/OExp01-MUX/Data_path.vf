////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Data_path.vf
// /___/   /\     Timestamp : 04/11/2017 20:09:06
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath C:/.Xilinx/jizu/OExp05-newDatapath/OExp04-IP2CPU -sympath C:/.Xilinx/jizu/OExp05-newDatapath/OExp04-IP2CPU/OExp01-MUX/ipcore_dir -intstyle ise -family kintex7 -verilog C:/.Xilinx/jizu/OExp05-newDatapath/OExp04-IP2CPU/OExp01-MUX/Data_path.vf -w C:/.Xilinx/jizu/OExp05-newDatapath/OExp04-IP2CPU/OExp01-MUX/Data_path.sch
//Design Name: Data_path
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module Data_path(ALUSrc_B, 
                 ALU_Control, 
                 Branch, 
                 clk, 
                 Data_in, 
                 inst_field, 
                 Jump, 
                 MemtoReg, 
                 RegDst, 
                 RegWrite, 
                 rst, 
                 ALU_out, 
                 Data_out, 
                 PC_out);

    input ALUSrc_B;
    input [2:0] ALU_Control;
    input Branch;
    input clk;
    input [31:0] Data_in;
    input [25:0] inst_field;
    input Jump;
    input MemtoReg;
    input RegDst;
    input RegWrite;
    input rst;
   output [31:0] ALU_out;
   output [31:0] Data_out;
   output [31:0] PC_out;
   
   wire [31:0] branch_pc;
   wire [31:0] Imm_32;
   wire N0;
   wire [31:0] pc_4;
   wire V5;
   wire [31:0] XLXN_1;
   wire [31:0] XLXN_3;
   wire [31:0] XLXN_12;
   wire XLXN_14;
   wire XLXN_15;
   wire [4:0] XLXN_16;
   wire [31:0] XLXN_17;
   wire [31:0] XLXN_27;
   wire [31:0] ALU_out_DUMMY;
   wire [31:0] Data_out_DUMMY;
   wire [31:0] PC_out_DUMMY;
   
   assign ALU_out[31:0] = ALU_out_DUMMY[31:0];
   assign Data_out[31:0] = Data_out_DUMMY[31:0];
   assign PC_out[31:0] = PC_out_DUMMY[31:0];
   ALU  XLXI_1 (.A(XLXN_1[31:0]), 
               .ALU_operation(ALU_Control[2:0]), 
               .B(XLXN_3[31:0]), 
               .Co(), 
               .overflew(), 
               .res(ALU_out_DUMMY[31:0]), 
               .zero(XLXN_14));
   Regs  XLXI_2 (.clk(clk), 
                .L_S(RegWrite), 
                .rst(rst), 
                .R_addr_A(inst_field[25:21]), 
                .R_addr_B(inst_field[20:16]), 
                .Wt_addr(XLXN_16[4:0]), 
                .Wt_data(XLXN_17[31:0]), 
                .rdata_A(XLXN_1[31:0]), 
                .rdata_B(Data_out_DUMMY[31:0]));
   REG32  XLXI_3 (.CE(V5), 
                 .clk(clk), 
                 .D(XLXN_27[31:0]), 
                 .rst(rst), 
                 .Q(PC_out_DUMMY[31:0]));
   MUX2T1_32  XLXI_4 (.I0(Data_out_DUMMY[31:0]), 
                     .I1(Imm_32[31:0]), 
                     .s(ALUSrc_B), 
                     .o(XLXN_3[31:0]));
   MUX2T1_32  XLXI_5 (.I0(pc_4[31:0]), 
                     .I1(branch_pc[31:0]), 
                     .s(XLXN_15), 
                     .o(XLXN_12[31:0]));
   MUX2T1_32  XLXI_6 (.I0(XLXN_12[31:0]), 
                     .I1({pc_4[31:28], inst_field[25:0], N0, N0}), 
                     .s(Jump), 
                     .o(XLXN_27[31:0]));
   add_32  XLXI_7 (.a(PC_out_DUMMY[31:0]), 
                  .b({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, V5, N0, 
         N0}), 
                  .c(pc_4[31:0]));
   add_32  XLXI_8 (.a(pc_4[31:0]), 
                  .b({Imm_32[29:0], N0, N0}), 
                  .c(branch_pc[31:0]));
   AND2  XLXI_9 (.I0(XLXN_14), 
                .I1(Branch), 
                .O(XLXN_15));
   MUX2T1_32  XLXI_10 (.I0(ALU_out_DUMMY[31:0]), 
                      .I1(Data_in[31:0]), 
                      .s(MemtoReg), 
                      .o(XLXN_17[31:0]));
   Ext_32  XLXI_12 (.imm_16(inst_field[15:0]), 
                   .Imm_32(Imm_32[31:0]));
   VCC  XLXI_13 (.P(V5));
   GND  XLXI_15 (.G(N0));
   MUX2T1_5  XLXI_16 (.I0(inst_field[20:16]), 
                     .I1(inst_field[15:11]), 
                     .s(RegDst), 
                     .o(XLXN_16[4:0]));
endmodule
